const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs').promises;

let mainWindow;

function createWindow() {
  console.log('üñ•Ô∏è [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á window...');

  mainWindow = new BrowserWindow({
    width: 1000,
    height: 700,
    webPreferences: {
      nodeIntegration: false,      // ‚úÖ ‡∏õ‡∏¥‡∏î Node integration
      contextIsolation: true,      // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Context Isolation
      preload: path.join(__dirname, 'preload.js') // ‚úÖ preload script
    }
  });

  mainWindow.loadFile('index.html');

  // ‡πÄ‡∏õ‡∏¥‡∏î DevTools ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
  mainWindow.webContents.openDevTools();

  console.log('‚úÖ [MAIN] ‡∏™‡∏£‡πâ‡∏≤‡∏á window ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

app.whenReady().then(() => {
  console.log('‚ö° [MAIN] Electron ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  createWindow();

  app.on('activate', () => {
    // macOS: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ window
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

app.on('window-all-closed', () => {
  // ‡∏õ‡∏¥‡∏î app ‡∏ó‡∏∏‡∏Å platform ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô macOS
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// ============ IPC HANDLERS ============

// üì® Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
ipcMain.handle('send-message', (event, message) => {
  console.log('üì® [MAIN] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', message);

  const response = {
    original: message,
    reply: `Server ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: "${message}"`,
    timestamp: new Date().toISOString(),
    status: 'success'
  };

  console.log('üì§ [MAIN] ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö:', response);
  return response;
});

// üëã Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
ipcMain.handle('say-hello', (event, name) => {
  console.log('üëã [MAIN] ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏Å‡∏±‡∏ö:', name);

  const greetings = [
    `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${name}! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Agent Wallboard`,
    `‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ ${name}! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?`,
    `Hello ${name}! ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏∞`
  ];

  const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];

  return {
    greeting: randomGreeting,
    name,
    time: new Date().toLocaleString('th-TH'),
    agentCount: 3 // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô agents ‡∏ó‡∏µ‡πà online
  };
});

// üìä Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
ipcMain.handle('get-agents', async () => {
  console.log('üìä [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents...');
  try {
    const data = await fs.readFile(path.join(__dirname, 'agent-data.json'), 'utf8');
    const agentData = JSON.parse(data);

    console.log('‚úÖ [MAIN] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return {
      success: true,
      data: agentData,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå [MAIN] Error ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    return {
      success: false,
      error: error.message
    };
  }
});

// üîÑ Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ agent
ipcMain.handle('change-agent-status', async (event, { agentId, newStatus }) => {
  console.log(`üîÑ [MAIN] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ agent ${agentId} ‡πÄ‡∏õ‡πá‡∏ô ${newStatus}`);

  try {
    const data = await fs.readFile(path.join(__dirname, 'agent-data.json'), 'utf8');
    const agentData = JSON.parse(data);

    const agent = agentData.agents.find(a => a.id === agentId);
    if (!agent) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö agent ID: ${agentId}`);

    agent.status = newStatus;
    agent.lastStatusChange = new Date().toISOString();

    await fs.writeFile(
      path.join(__dirname, 'agent-data.json'),
      JSON.stringify(agentData, null, 2),
      'utf8'
    );

    console.log(`‚úÖ [MAIN] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${agentId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    return {
      success: true,
      agent,
      message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡πÅ‡∏•‡πâ‡∏ß`
    };
  } catch (error) {
    console.error('‚ùå [MAIN] Error ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
});

console.log('üîß [MAIN] IPC Handlers ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
